<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boot.DAO.jobpostingIndividualDAO">

	<sql id="orderType">
<!--		<if test='(orderType == "recommendation" and cri.login_usertype == "1")'> 큰 따옴표 때문에 char타입이 적용이 안됐음 -->
		<if test="(orderType == 'recommendation' and cri.login_usertype == '1' and cri.jobNames != null and cri.jobNames.size() > 0)">
<!--			ORDER BY r.resume_num-->
<!--			ORDER BY stack_names like concat ('%','Android','%') DESC-->
<!--			ORDER BY job_names like concat ('%','(SELECT job_name FROM user_job WHERE user_email = cri.login_email)','%') DESC-->
			ORDER BY (CASE
	            <foreach item="job" collection="cri.jobNames" separator=" " open="" close="">
	                WHEN job_names LIKE '%${job}%' THEN 1
	            </foreach>
	            ELSE 0
        	END) DESC
		</if>
		<if test="(orderType == 'recommendation' and cri.login_usertype == '2' and cri.stackNames != null and cri.stackNames.size() > 0)">
<!--			ORDER BY stack_names like concat ('%','(SELECT stack FROM com_stack WHERE com_email = cri.login_email)','%') DESC-->
			ORDER BY (CASE
	            <foreach item="stack" collection="cri.stackNames" separator=" " open="" close="">
	                WHEN stack_names LIKE '%${stack}%' THEN 1
	            </foreach>
	            ELSE 0
        	END) DESC
		</if>
		<if test="(orderType == 'recommendation' and (cri.jobNames.size() == 0 and cri.stackNames.size() == 0))">
			ORDER BY r.resume_num ASC
		</if>
		<if test='(orderType == "latest")'>
			ORDER BY r.resume_num DESC
		</if>
	</sql>
	<sql id="criteria3">
		WHERE resume_offer = '예'
		<if test='(cri.jobType != null and cri.jobType != "")'>
			AND r.user_email IN (select distinct user_email from user_job where job_name = #{cri.jobType})
		</if>
		<if test='(cri.stackType != null and cri.stackType != "")'>
			AND resume_num IN (select resume_num from resume_stack where stack_name = #{cri.stackType})
		</if>
		<if test='(cri.locationType != null and cri.locationType != "")'>
			AND user_location = #{cri.locationType}
		</if>
		<if test='(cri.careerType != null and cri.careerType != "" and (cri.careerType == "0" or cri.careerType == "1" or cri.careerType == "2"))'>
			AND TIMESTAMPDIFF(YEAR, career_start, career_end) = #{cri.careerType}
		</if>
		<if test='(cri.careerType != null and cri.careerType != "" and (cri.careerType != "0" or cri.careerType != "1" or cri.careerType != "2"))'>
			AND TIMESTAMPDIFF(YEAR, career_start, career_end) >= #{cri.careerType}
		</if>
	</sql>
<!--    <![CDATA[ : mybatis 에서 특수문자 인식처리 -->
    <select id="jobpostingIndividualSupport" resultType="com.boot.DTO.jobpostingIndividualDTO">
    <![CDATA[ 
		select rownum, user_name, user_email, user_gender, resume_age, career_month, resume_writeDate, resume_num, korean_age, stack_names, job_names, career_years
			from (select rownum, user_name, user_email, user_gender, resume_age, career_month, resume_writeDate, resume_num, korean_age, stack_names, job_names, career_years
			from (select row_number() over(ORDER BY r.resume_num DESC) as rownum,
									    u.user_name,
									    u.user_gender,
									    r.user_email,
									    r.resume_age,
									    r.career_month,
									    r.resume_writeDate,
									    r.resume_num,
									    timestampdiff(YEAR, user_birthdate, CURDATE()) + 1 AS korean_age,
									    timestampdiff(YEAR, career_start, career_end) AS career_years,
									    (SELECT 
									        GROUP_CONCAT(rs.stack_name)
									     FROM
									        resume_stack rs
									     WHERE rs.resume_num = r.resume_num
									    ) AS stack_names,
									    (SELECT 
									        GROUP_CONCAT(u.job_name)
									     FROM
									        user_job u
									     WHERE u.user_email = r.user_email
									    ) AS job_names
									  FROM resume_tb r
									  JOIN user_tb u ON r.user_email = u.user_email
									  ]]>
									  <include refid="criteria3"></include>
									  <include refid="orderType"></include>
									  <![CDATA[
									  ) a
			where rownum <= (#{cri.pageNum} * #{cri.amount})
				)aa
		where rownum > (#{cri.pageNum}-1) * #{cri.amount} 
		]]>
    </select>
	

    <select id="getJobList" resultType="String"> 
		SELECT 
		    job_name
		FROM 
		    job
	</select>

    <select id="getStackList" resultType="String"> 
		SELECT 
		    stack_name
		FROM 
		    stack
	</select>

    <select id="getLocationList" resultType="String"> 
		SELECT
			location_name
		FROM
			location
	</select>

<!--    <select id="getTotalCount" resultType="int"> -->
<!--		SELECT-->
<!--			count(*)-->
<!--		FROM-->
<!--			resume_tb-->
<!--	</select>-->

    <select id="getTotalCount" resultType="int"> 
	<![CDATA[ 
		SELECT 
			count(*)
		FROM
			resume_tb r
		JOIN
			user_tb u ON r.user_email = u.user_email
	]]>
	 	<include refid="criteria3"></include>
	</select>

    <select id="getJobNames" resultType="String"> 
		SELECT
			job_name
		FROM
			user_job
		WHERE
			user_email = #{login_email}
	</select>

    <select id="getStackNames" resultType="String"> 
		SELECT
			stack
		FROM
			com_stack
		WHERE
			com_email = #{login_email}
	</select>

    <select id="getOfferInfo" resultType="com.boot.DTO.OfferInfoDTO"> 
		SELECT
			notice_num, notice_title, notice_job, notice_career, notice_area1, notice_pay1, notice_pay2, com_name
		FROM
			notice_tb
		WHERE
			com_email = #{login_email}
		AND datediff(notice_endDate, now()) >= 0
	</select>
	
	<insert id="insertOffer">
	    INSERT INTO
	    	offer (notice_num, offer_content, user_email, com_email, resume_num)
        VALUES
        	(#{offer.notice_num}, #{offer.offer_content}, #{offer.user_email}, #{offer.com_email}, #{offer.resume_num})
	</insert>
	

<!--	이력서 열람      -->

	
    <select id="userInfo" resultType="com.boot.DTO.UserDTO">
		select user_email, user_name, user_gender, user_tel, user_location, user_location2, user_birthdate from user_tb where user_email=#{user_email};
    </select>
	
    <select id="checkOffer" resultType="int">
		select 
			count(*)
  		from
  			offer
 		where
 			com_email = #{login_email} and resume_num = #{resumeNum}
    </select>
    
    <select id="resumeInfo" resultType="com.boot.DTO.ResumeDTO">
        select 
        r.resume_num, resume_title, u.user_name, resume_age, u.user_gender, u.user_email, GROUP_CONCAT(rs.stack_name SEPARATOR ',') AS stack_name,
        u.user_tel, u.user_location, u.user_location2, resume_pay, career_start, career_end, 
        resume_comName, resume_comPart, resume_comPosition, resume_status,        
        resume_eduStart, resume_eduEnd, resume_eduName, resume_eduMajor, resume_eduStatus,
        resume_exStart, resume_exEnd, resume_exName, resume_exContent,
        resume_licenseDate, resume_licenseContent,
        resume_portfolio_name, resume_portfolio_url,
        resume_intro
        from resume_tb r
        LEFT JOIN user_tb u ON r.user_email = u.user_email 
        left join resume_stack rs ON r.resume_num = rs.resume_num
        where r.resume_num = #{resume_num}
    </select>
</mapper>












